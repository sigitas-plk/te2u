@inherits UmbracoViewPage<dynamic>
@using Umbraco.Web.Templates
@using Newtonsoft.Json.Linq
@*
    Razor helpers located at the bottom of this file
*@
@if (Model != null && Model.sections != null)
{
    var oneColumn = ((System.Collections.ICollection)Model.sections).Count == 1;

    <div class="umb-grid">
        @if (oneColumn)
        {
            foreach (var section in Model.sections)
            {

                foreach (var row in section.rows)
                {
                    @renderRow(row, true);
                }

            }
        }
        else
        {
            <div class="mdl-grid">

                @foreach (var s in Model.sections)
                {

                    <div class="mdl-cell mdl-cell--@(s.grid)-col">
                        @foreach (var row in s.rows)
                        {
                            @renderRow(row, false);
                        }
                    </div>

                }

            </div>
        }
    </div>
}
@helper renderRow(dynamic row, bool singleColumn)
{

    <div @RenderElementAttributes(row, true)>
        @Umbraco.If(singleColumn, "<div class='mdl-grid'>")

        @foreach (var area in row.areas)
        {
            <div class="mdl-cell mdl-cell--@(area.grid)-col @RenderElementAttributes(area, false)">

                    @foreach (var control in area.controls)
                    {
                        if (control != null && control.editor != null && control.editor.view != null)
                        {
                            <text>@Html.Partial("grid/editors/base", (object)control)</text>
                        }
                    }
             
            </div>}

        @Umbraco.If(singleColumn, "</div>")
    </div>
}
@functions {
    public static MvcHtmlString RenderElementAttributes(dynamic contentItem, bool isRow)
    {
        var attrs = new List<string>();
        JObject cfg = contentItem.config;

        if (cfg != null)
            if (isRow)
            {
                foreach (JProperty property in cfg.Properties())
                {
                    attrs.Add(property.Name + "=\"" + property.Value.ToString() + "\"");
                }
            }
            else
            {
                foreach (JProperty property in cfg.Properties())
                {
                    attrs.Add(property.Value.ToString());
                }
            }

        JObject style = contentItem.styles;

        if (style != null)
        {
            var cssVals = new List<string>();
            foreach (JProperty property in style.Properties())
                cssVals.Add(property.Name + ":" + property.Value.ToString() + ";");

            if (cssVals.Any())
                attrs.Add("style=\"" + string.Join(" ", cssVals) + "\"");
        }

        return new MvcHtmlString(string.Join(" ", attrs));
    }
}